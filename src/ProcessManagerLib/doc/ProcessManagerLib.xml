<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ProcessManagerLib</name>
    </assembly>
    <members>
        <member name="T:ProcessManagerLib.Runner.EnvironmentVariable">
            <summary>
             An environment variable is a dynamic-named value that can affect the way running processes . 
             They are part of the environment in which a process runs.
             Default - System environment variable
            </summary>
        </member>
        <member name="F:ProcessManagerLib.Runner.ExecItem.Callback">
            <summary>
               Callback functions 
            </summary>
        </member>
        <member name="M:ProcessManagerLib.Runner.ExecRunItem.#ctor(System.String,System.String,System.String)">
            
             <summary> Create Task Adapter with domain Credentional </summary> 
             
             <param name="UserName">Domain Used Name</param>
             <param name="Password">Domain user name Password</param>
             <param name="Domain">Domain Name</param>
            
        </member>
        <member name="M:ProcessManagerLib.Runner.ExecRunItem.getExitCode">
            <summary>
             Get exit code
            </summary>
            <returns></returns>
        </member>
        <member name="T:ProcessManagerLib.Runner.ProcessManager">
            <summary>
               Running multiple processes asynchronously
            </summary>
        </member>
        <member name="M:ProcessManagerLib.Runner.ProcessManager.Finalize">
            <summary>
             Destructor
            </summary>
        </member>
        <member name="M:ProcessManagerLib.Runner.ProcessManager.Dispose">
            <summary>
               Dispose method to release unmanaged resources used by your application.
               Abort all running process on the container
            </summary>
        </member>
        <member name="M:ProcessManagerLib.Runner.ProcessManager.Dispose(System.Boolean)">
            <summary>
               Dispose method to release unmanaged resources used by your application.
               Abort all running process on the container
            </summary>
        </member>
        <member name="M:ProcessManagerLib.Runner.ProcessManager.RunExec(System.String,System.String,System.String,System.String,System.Func{System.String,System.String,System.Boolean},System.String,System.Int32)">
            <summary>
              Adds a Process to the Execute Container if the ProcessID does not already exist
            </summary>
            <param name="ProcessID">Unigue Process ID</param>
            <param name="exec">Execute Task Name</param>
            <param name="param">Prameters line</param>
            <param name="description">Process description</param>
            <param name="callBack">Callback function</param>
            <param name="workingDir">Directory</param>
            <param name="timeoout"></param>
            <returns></returns>
        </member>
        <member name="M:ProcessManagerLib.Runner.ProcessManager.Abort(System.String)">
            <summary>
              Kill the process by specifying its ProcessName. 
              All the below kill conventions will send the TERM signal to the specified process.
            </summary>
            <param name="ProcessName"></param>
        </member>
        <member name="M:ProcessManagerLib.Runner.ProcessManager.GetProcess(System.String)">
            <summary>
                Get active process by ID
            </summary>
            <param name="processID"></param>
            <returns></returns>
        </member>
        <member name="M:ProcessManagerLib.Runner.ProcessManager.GetMemory(System.String)">
            <summary>
              Get process memory (MB , trancate KB )
            </summary>
            <param name="processID"></param>
            <returns></returns>
        </member>
        <member name="M:ProcessManagerLib.Runner.ProcessManager.#ctor">
            <summary>
              Default Constructor.
            </summary>
        </member>
        <member name="M:ProcessManagerLib.Runner.ProcessManager.AbortAll">
            <summary>
              Use AbortAll to Stop Processes all process Executer Manager.
              In contrast, kill terminates processes based on Process ID number 
            </summary>
        </member>
        <member name="P:ProcessManagerLib.Runner.ProcessManager.OnProcessExit">
            <summary>
              Task OnExit Callback Function
            </summary>
            <code>  
             Example:
               public static bool OnExitCallbackFunction(String ProcessID, String ProcessName, String exitCode)
               {
                  Console.WriteLine($"ProcessID: { ProcessID} , Task Completed : {ProcessName} , Exit code {exitCode}");
                   return true;
               }
             </code>
        </member>
        <member name="M:ProcessManagerLib.Runner.ProcessManager.WaitAll">
            <summary>
              Wait All tasks from container
            </summary>
        </member>
        <member name="M:ProcessManagerLib.Runner.ProcessManager.WaitAll(System.Collections.Generic.List{System.String})">
            <summary>
               The WaitAll blocks the current thread until all other tasks have completed execution.
            </summary>
            <param name="ProcessNames">List of process names</param>
        </member>
        <member name="M:ProcessManagerLib.Runner.ProcessManager.SetCurrentStatus(System.String,System.String)">
            <summary>
               Set Current Task Status 
            </summary>
            <param name="ProcessName"></param>
            <param name="CurrentStatus"></param>
        </member>
        <member name="M:ProcessManagerLib.Runner.ProcessManager.GetCurrentStatus(System.String)">
            <summary>
               Get current task status string
            </summary>
            <param name="ProcessName"></param>
        </member>
        <member name="M:ProcessManagerLib.Runner.ProcessManager.GetLatestMessage(System.String)">
            <summary>
              Get Message from Active Process
            </summary>
            <param name="ProcessName"></param>
            <returns></returns>
        </member>
        <member name="M:ProcessManagerLib.Runner.ProcessManager.GetStatuses">
            <summary>
               Get all active task
            </summary>
            <returns></returns>
        </member>
        <member name="M:ProcessManagerLib.Runner.ProcessManager.WaitAny">
            <summary>
              Wait Any Task.  WaitAny locks the current thread until any process have completed execution.
            </summary>
        </member>
        <member name="M:ProcessManagerLib.Runner.ProcessManager.Count">
            <summary>
               Get Task Count on container
            </summary>
            <returns></returns>
        </member>
        <member name="M:ProcessManagerLib.Runner.ProcessManager.IsCompleted(System.String)">
            <summary>
              Check specific task is completed
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:ProcessManagerLib.Runner.ProcessManager.Status(System.String)">
            <summary>
              Get task status by task name
            </summary>
            <param name="ProcessName"></param>
            <returns></returns>
        </member>
        <member name="M:ProcessManagerLib.Runner.ProcessManager.Remove(ProcessManagerLib.Runner.ExecItem)">
            <summary>
               Remove task from container
            </summary>
            <param name="taskItem"></param>
            <returns>TaskItem</returns>
        </member>
    </members>
</doc>
